From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LuckyValenok <luckyvalenok1@gmail.com>
Date: Sun, 12 May 2024 05:38:58 +0500
Subject: [PATCH] =?UTF-8?q?=D0=90=D0=B2=D1=82=D0=BE=D1=80=D0=B8=D0=B7?=
 =?UTF-8?q?=D0=B0=D1=86=D0=B8=D1=8F?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit


diff --git a/src/main/java/com/mojang/authlib/minecraft/client/ObjectMapper.java b/src/main/java/com/mojang/authlib/minecraft/client/ObjectMapper.java
index ddaebda3d34a20966195132984534ba3472275ba..63e9b95c77e8bc3a5902bab760d4cb2d48a753c9 100644
--- a/src/main/java/com/mojang/authlib/minecraft/client/ObjectMapper.java
+++ b/src/main/java/com/mojang/authlib/minecraft/client/ObjectMapper.java
@@ -50,6 +50,7 @@ public class ObjectMapper {
                 .registerTypeAdapter(PropertyMap.class, new PropertyMap.Serializer())
                 .registerTypeAdapter(UUID.class, new UUIDTypeAdapter())
                 .registerTypeAdapter(ProfileSearchResultsResponse.class, new ProfileSearchResultsResponse.Serializer())
+                .registerTypeAdapter(Void.class, new VoidTypeAdapter())
                 .create());
     }
 }
diff --git a/src/main/java/com/mojang/authlib/minecraft/client/VoidTypeAdapter.java b/src/main/java/com/mojang/authlib/minecraft/client/VoidTypeAdapter.java
new file mode 100644
index 0000000000000000000000000000000000000000..ab06b7f01cc0650876417636adf302b39cc0f385
--- /dev/null
+++ b/src/main/java/com/mojang/authlib/minecraft/client/VoidTypeAdapter.java
@@ -0,0 +1,17 @@
+package com.mojang.authlib.minecraft.client;
+
+import com.google.gson.TypeAdapter;
+import com.google.gson.stream.JsonReader;
+import com.google.gson.stream.JsonWriter;
+
+public class VoidTypeAdapter extends TypeAdapter<Void> {
+
+  @Override
+  public void write(JsonWriter out, Void value) {
+  }
+
+  @Override
+  public Void read(JsonReader in) {
+    return null;
+  }
+}
\ No newline at end of file
diff --git a/src/main/java/com/mojang/authlib/yggdrasil/TextureUrlChecker.java b/src/main/java/com/mojang/authlib/yggdrasil/TextureUrlChecker.java
index 70b910a97659b6cc899e28c0f8388d663a342a8e..d13a94b4d60ec659560487b9d8ec103f4cdf8d56 100644
--- a/src/main/java/com/mojang/authlib/yggdrasil/TextureUrlChecker.java
+++ b/src/main/java/com/mojang/authlib/yggdrasil/TextureUrlChecker.java
@@ -15,7 +15,9 @@ public class TextureUrlChecker {
 
     private static final List<String> ALLOWED_DOMAINS = List.of(
         ".minecraft.net",
-        ".mojang.com"
+        ".mojang.com",
+        ".vimeworld.com",
+        ".vimeworld.ru"
     );
 
     private static final List<String> BLOCKED_DOMAINS = List.of(
diff --git a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
index 167370396e8e1dd06c52f1208943b43f6718d8c6..11849c57ad240f749842f748bf5d0c727ca186e3 100644
--- a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
+++ b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService.java
@@ -29,9 +29,10 @@ public class YggdrasilAuthenticationService extends HttpAuthenticationService {
         this.environment = environment;
         LOGGER.info("Environment: {}", environment);
 
-        final MinecraftClient client = MinecraftClient.unauthenticated(proxy);
-        final URL publicKeySetUrl = HttpAuthenticationService.constantURL(environment.servicesHost() + "/publickeys");
-        servicesKeySet = YggdrasilServicesKeyInfo.get(publicKeySetUrl, client);
+        //final MinecraftClient client = MinecraftClient.unauthenticated(proxy);
+        //final URL publicKeySetUrl = HttpAuthenticationService.constantURL(environment.servicesHost() + "/publickeys");
+        //servicesKeySet = YggdrasilServicesKeyInfo.get(publicKeySetUrl, client);
+        servicesKeySet = null;
     }
 
     private static Environment determineEnvironment() {
diff --git a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilEnvironment.java b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilEnvironment.java
index 95a0790242aaeaf627388e9761abf2c8838e3578..27e14853c6bf4dca247bc265ce1e9d7cf24ecb66 100644
--- a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilEnvironment.java
+++ b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilEnvironment.java
@@ -8,8 +8,8 @@ import java.util.stream.Stream;
 
 public enum YggdrasilEnvironment {
     PROD(
-        "https://sessionserver.mojang.com",
-        "https://api.minecraftservices.com"
+        "https://sessionserver.vimeworld.com",
+        "https://sessionserver.vimeworld.com"
     ),
     STAGING(
         "https://yggdrasil-auth-session-staging.mojang.zone",
diff --git a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
index bfc1e27c37689c1fbb927404a7176780a439a057..60f03e92ea562a1f623341522b20aebf2edabfd8 100644
--- a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
+++ b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService.java
@@ -66,7 +66,7 @@ public class YggdrasilMinecraftSessionService implements MinecraftSessionService
     protected YggdrasilMinecraftSessionService(final ServicesKeySet servicesKeySet, final Proxy proxy, final Environment env) {
         client = MinecraftClient.unauthenticated(proxy);
         this.servicesKeySet = servicesKeySet;
-        baseUrl = env.sessionHost() + "/session/minecraft/";
+        baseUrl = env.sessionHost() + "/";
 
         joinUrl = HttpAuthenticationService.constantURL(baseUrl + "join");
         checkUrl = HttpAuthenticationService.constantURL(baseUrl + "hasJoined");
@@ -74,7 +74,7 @@ public class YggdrasilMinecraftSessionService implements MinecraftSessionService
 
     @Override
     public void joinServer(final UUID profileId, final String authenticationToken, final String serverId) throws AuthenticationException {
-        final JoinMinecraftServerRequest request = new JoinMinecraftServerRequest(authenticationToken, profileId, serverId);
+        final JoinMinecraftServerRequest request = new JoinMinecraftServerRequest(authenticationToken, profileId, serverId, "unsafe");
         try {
             client.post(joinUrl, request, Void.class);
         } catch (final MinecraftClientException e) {
@@ -87,6 +87,7 @@ public class YggdrasilMinecraftSessionService implements MinecraftSessionService
     public ProfileResult hasJoinedServer(final String profileName, final String serverId, @Nullable final InetAddress address) throws AuthenticationUnavailableException {
         final Map<String, Object> arguments = new HashMap<>();
 
+        arguments.put("type", "unsafe");
         arguments.put("username", profileName);
         arguments.put("serverId", serverId);
 
@@ -183,13 +184,14 @@ public class YggdrasilMinecraftSessionService implements MinecraftSessionService
     }
 
     private SignatureState getPropertySignatureState(final Property property) {
-        if (!property.hasSignature()) {
+        /*if (!property.hasSignature()) {
             return SignatureState.UNSIGNED;
         }
         if (servicesKeySet.keys(ServicesKeyType.PROFILE_PROPERTY).stream().noneMatch(key -> key.validateProperty(property))) {
             return SignatureState.INVALID;
         }
-        return SignatureState.SIGNED;
+        return SignatureState.SIGNED;*/
+        return SignatureState.UNSIGNED;
     }
 
     @Nullable
diff --git a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilUserApiService.java b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilUserApiService.java
index b99884b82d9fda035c450ea2c03ea1bfe66ed31d..cdc9dbd71e27e799835d725392f0423e5f15c788 100644
--- a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilUserApiService.java
+++ b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilUserApiService.java
@@ -26,29 +26,13 @@ import java.util.UUID;
 import java.util.concurrent.Executor;
 
 public class YggdrasilUserApiService implements UserApiService {
-    private static final long BLOCKLIST_REQUEST_COOLDOWN_SECONDS = 120;
-    private static final UUID ZERO_UUID = new UUID(0, 0);
-
-    private final URL routePrivileges;
-    private final URL routeBlocklist;
-    private final URL routeKeyPair;
-    private final URL routeAbuseReport;
 
     private final MinecraftClient minecraftClient;
     private final Environment environment;
-    @Nullable
-    private Instant nextAcceptableBlockRequest;
-
-    @Nullable
-    private Set<UUID> blockList;
 
     public YggdrasilUserApiService(final String accessToken, final Proxy proxy, final Environment env) {
         this.minecraftClient = new MinecraftClient(accessToken, proxy);
         environment = env;
-        routePrivileges = HttpAuthenticationService.constantURL(env.servicesHost() + "/player/attributes");
-        routeBlocklist = HttpAuthenticationService.constantURL(env.servicesHost() + "/privacy/blocklist");
-        routeKeyPair = HttpAuthenticationService.constantURL(env.servicesHost() + "/player/certificates");
-        routeAbuseReport = HttpAuthenticationService.constantURL(env.servicesHost() + "/player/report");
     }
 
     @Override
@@ -58,101 +42,30 @@ public class YggdrasilUserApiService implements UserApiService {
 
     @Override
     public KeyPairResponse getKeyPair() {
-        return minecraftClient.post(routeKeyPair, KeyPairResponse.class);
+        return null;
     }
 
     @Override
     public boolean isBlockedPlayer(final UUID playerID) {
-        if (playerID.equals(ZERO_UUID)) {
-            return false;
-        }
-
-        if (blockList == null) {
-            blockList = fetchBlockList();
-            if (blockList == null) {
-                return false;
-            }
-        }
-
-        return blockList.contains(playerID);
+        return false;
     }
 
     @Override
     public void refreshBlockList() {
-        if (blockList == null || canMakeBlockListRequest()) {
-            blockList = forceFetchBlockList();
-        }
-    }
-
-    @Nullable
-    private Set<UUID> fetchBlockList() {
-        if (!canMakeBlockListRequest()) {
-            return null;
-        }
-        return forceFetchBlockList();
-    }
-
-    private boolean canMakeBlockListRequest() {
-        return nextAcceptableBlockRequest == null || Instant.now().isAfter(nextAcceptableBlockRequest);
-    }
-
-    private Set<UUID> forceFetchBlockList() {
-        nextAcceptableBlockRequest = Instant.now().plusSeconds(BLOCKLIST_REQUEST_COOLDOWN_SECONDS);
-        try {
-            final BlockListResponse response = minecraftClient.get(routeBlocklist, BlockListResponse.class);
-            if (response == null) {
-                return Set.of();
-            }
-            return response.blockedProfiles();
-        } catch (final MinecraftClientHttpException e) {
-            //TODO: Look at the error type and response code. Retry if 5xx
-            //TODO: Handle when status is 401 (Unathorized) -> Refresh token/login again.
-            return null;
-        } catch (final MinecraftClientException e) {
-            //Low level error, IO problems or JSON parsing error
-            //TODO: Retry if SERVICE_UNAVAILABLE error
-            return null;
-        }
     }
 
     @Override
     public UserProperties fetchProperties() throws AuthenticationException {
-        try {
-            final UserAttributesResponse response = minecraftClient.get(routePrivileges, UserAttributesResponse.class);
-            final ImmutableSet.Builder<UserFlag> flags = ImmutableSet.builder();
-            final ImmutableMap.Builder<String, BanDetails> bannedScopes = ImmutableMap.builder();
-
-            if (response != null) {
-                final UserAttributesResponse.Privileges privileges = response.privileges();
-                if (privileges != null) {
-                    addFlagIfUserHasPrivilege(privileges.getOnlineChat(), UserFlag.CHAT_ALLOWED, flags);
-                    addFlagIfUserHasPrivilege(privileges.getMultiplayerServer(), UserFlag.SERVERS_ALLOWED, flags);
-                    addFlagIfUserHasPrivilege(privileges.getMultiplayerRealms(), UserFlag.REALMS_ALLOWED, flags);
-                    addFlagIfUserHasPrivilege(privileges.getTelemetry(), UserFlag.TELEMETRY_ENABLED, flags);
-                    addFlagIfUserHasPrivilege(privileges.getOptionalTelemetry(), UserFlag.OPTIONAL_TELEMETRY_AVAILABLE, flags);
-                }
-
-                final UserAttributesResponse.ProfanityFilterPreferences profanityFilterPreferences = response.profanityFilterPreferences();
-                if (profanityFilterPreferences != null && profanityFilterPreferences.enabled()) {
-                    flags.add(UserFlag.PROFANITY_FILTER_ENABLED);
-                }
-
-                if (response.banStatus() != null) {
-                    response.banStatus().bannedScopes().forEach((scopeType, scope) -> {
-                        bannedScopes.put(scopeType, new BanDetails(scope.banId(), scope.expires(), scope.reason(), scope.reasonMessage()));
-                    });
-                }
-            }
-
-            return new UserProperties(flags.build(), bannedScopes.build());
-        } catch (final MinecraftClientHttpException e) {
-            //TODO: Handle when status is 401 (Unauthorized) -> Refresh token/login again.
-            throw e.toAuthenticationException();
-        } catch (final MinecraftClientException e) {
-            //Low level error, IO problems or JSON parsing error
-            //TODO: Retry if SERVICE_UNAVAILABLE error
-            throw e.toAuthenticationException();
-        }
+        final ImmutableSet.Builder<UserApiService.UserFlag> flags = ImmutableSet.builder();
+        final ImmutableMap.Builder<String, BanDetails> bannedScopes = ImmutableMap.builder();
+
+        addFlagIfUserHasPrivilege(true, UserApiService.UserFlag.CHAT_ALLOWED, flags);
+        addFlagIfUserHasPrivilege(true, UserApiService.UserFlag.SERVERS_ALLOWED, flags);
+        addFlagIfUserHasPrivilege(false, UserApiService.UserFlag.REALMS_ALLOWED, flags);
+        addFlagIfUserHasPrivilege(false, UserApiService.UserFlag.TELEMETRY_ENABLED, flags);
+        addFlagIfUserHasPrivilege(false, UserApiService.UserFlag.OPTIONAL_TELEMETRY_AVAILABLE, flags);
+
+        return new UserApiService.UserProperties(flags.build(), bannedScopes.build());
     }
 
     private static void addFlagIfUserHasPrivilege(final boolean privilege, final UserFlag value, final ImmutableSet.Builder<UserFlag> output) {
@@ -163,12 +76,11 @@ public class YggdrasilUserApiService implements UserApiService {
 
     @Override
     public void reportAbuse(final AbuseReportRequest request) {
-        minecraftClient.post(routeAbuseReport, request, Void.class);
     }
 
     @Override
     public boolean canSendReports() {
-        return true;
+        return false;
     }
 
     @Override
diff --git a/src/main/java/com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest.java b/src/main/java/com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest.java
index eb2863793fefdab17d7904853d218079335be75d..6645efd7d3e13d14401ee6d7a17382069215b40a 100644
--- a/src/main/java/com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest.java
+++ b/src/main/java/com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest.java
@@ -10,6 +10,8 @@ public record JoinMinecraftServerRequest(
     @SerializedName("selectedProfile")
     UUID selectedProfile,
     @SerializedName("serverId")
-    String serverId
+    String serverId,
+    @SerializedName("authData")
+    String authData
 ) {
 }
